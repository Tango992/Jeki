// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: merchant.proto

package merchantpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MerchantClient is the client API for Merchant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantClient interface {
	FindAllRestaurants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Restaurants, error)
	FindRestaurantByID(ctx context.Context, in *IdRestaurant, opts ...grpc.CallOption) (*RestaurantID, error)
	FindMenuID(ctx context.Context, in *MenuId, opts ...grpc.CallOption) (*Menu, error)
	FindMenuDetailsWithSubtotal(ctx context.Context, in *RequestMenuDetails, opts ...grpc.CallOption) (*ResponseMenuDetails, error)
}

type merchantClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantClient(cc grpc.ClientConnInterface) MerchantClient {
	return &merchantClient{cc}
}

func (c *merchantClient) FindAllRestaurants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Restaurants, error) {
	out := new(Restaurants)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/FindAllRestaurants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) FindRestaurantByID(ctx context.Context, in *IdRestaurant, opts ...grpc.CallOption) (*RestaurantID, error) {
	out := new(RestaurantID)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/FindRestaurantByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) FindMenuID(ctx context.Context, in *MenuId, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/FindMenuID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) FindMenuDetailsWithSubtotal(ctx context.Context, in *RequestMenuDetails, opts ...grpc.CallOption) (*ResponseMenuDetails, error) {
	out := new(ResponseMenuDetails)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/FindMenuDetailsWithSubtotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServer is the server API for Merchant service.
// All implementations must embed UnimplementedMerchantServer
// for forward compatibility
type MerchantServer interface {
	FindAllRestaurants(context.Context, *emptypb.Empty) (*Restaurants, error)
	FindRestaurantByID(context.Context, *IdRestaurant) (*RestaurantID, error)
	FindMenuID(context.Context, *MenuId) (*Menu, error)
	FindMenuDetailsWithSubtotal(context.Context, *RequestMenuDetails) (*ResponseMenuDetails, error)
	mustEmbedUnimplementedMerchantServer()
}

// UnimplementedMerchantServer must be embedded to have forward compatible implementations.
type UnimplementedMerchantServer struct {
}

func (UnimplementedMerchantServer) FindAllRestaurants(context.Context, *emptypb.Empty) (*Restaurants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllRestaurants not implemented")
}
func (UnimplementedMerchantServer) FindRestaurantByID(context.Context, *IdRestaurant) (*RestaurantID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRestaurantByID not implemented")
}
func (UnimplementedMerchantServer) FindMenuID(context.Context, *MenuId) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenuID not implemented")
}
func (UnimplementedMerchantServer) FindMenuDetailsWithSubtotal(context.Context, *RequestMenuDetails) (*ResponseMenuDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenuDetailsWithSubtotal not implemented")
}
func (UnimplementedMerchantServer) mustEmbedUnimplementedMerchantServer() {}

// UnsafeMerchantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServer will
// result in compilation errors.
type UnsafeMerchantServer interface {
	mustEmbedUnimplementedMerchantServer()
}

func RegisterMerchantServer(s grpc.ServiceRegistrar, srv MerchantServer) {
	s.RegisterService(&Merchant_ServiceDesc, srv)
}

func _Merchant_FindAllRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).FindAllRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/FindAllRestaurants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).FindAllRestaurants(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_FindRestaurantByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRestaurant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).FindRestaurantByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/FindRestaurantByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).FindRestaurantByID(ctx, req.(*IdRestaurant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_FindMenuID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).FindMenuID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/FindMenuID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).FindMenuID(ctx, req.(*MenuId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_FindMenuDetailsWithSubtotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMenuDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).FindMenuDetailsWithSubtotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/FindMenuDetailsWithSubtotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).FindMenuDetailsWithSubtotal(ctx, req.(*RequestMenuDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// Merchant_ServiceDesc is the grpc.ServiceDesc for Merchant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Merchant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.Merchant",
	HandlerType: (*MerchantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllRestaurants",
			Handler:    _Merchant_FindAllRestaurants_Handler,
		},
		{
			MethodName: "FindRestaurantByID",
			Handler:    _Merchant_FindRestaurantByID_Handler,
		},
		{
			MethodName: "FindMenuID",
			Handler:    _Merchant_FindMenuID_Handler,
		},
		{
			MethodName: "FindMenuDetailsWithSubtotal",
			Handler:    _Merchant_FindMenuDetailsWithSubtotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant.proto",
}
