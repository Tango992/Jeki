// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: merchant.proto

package merchantpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MerchantClient is the client API for Merchant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantClient interface {
	// For customer (order service)
	FindAllRestaurants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RestaurantCompactRepeated, error)
	FindRestaurantById(ctx context.Context, in *IdRestaurant, opts ...grpc.CallOption) (*RestaurantDetailed, error)
	FindMenuById(ctx context.Context, in *MenuId, opts ...grpc.CallOption) (*Menu, error)
	CalculateOrder(ctx context.Context, in *RequestMenuDetails, opts ...grpc.CallOption) (*CalculateOrderResponse, error)
	// For admin
	CreateRestaurant(ctx context.Context, in *NewRestaurantData, opts ...grpc.CallOption) (*IdRestaurant, error)
	UpdateRestaurant(ctx context.Context, in *UpdateRestaurantData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateMenu(ctx context.Context, in *NewMenuData, opts ...grpc.CallOption) (*MenuId, error)
	UpdateMenu(ctx context.Context, in *UpdateMenuData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMenu(ctx context.Context, in *AdminIdMenuId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindRestaurantByAdminId(ctx context.Context, in *AdminId, opts ...grpc.CallOption) (*RestaurantData, error)
	FindMenusByAdminId(ctx context.Context, in *AdminId, opts ...grpc.CallOption) (*MenuCompactRepeated, error)
	FindOneMenuByAdminId(ctx context.Context, in *AdminIdMenuId, opts ...grpc.CallOption) (*MenuCompact, error)
}

type merchantClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantClient(cc grpc.ClientConnInterface) MerchantClient {
	return &merchantClient{cc}
}

func (c *merchantClient) FindAllRestaurants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RestaurantCompactRepeated, error) {
	out := new(RestaurantCompactRepeated)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/FindAllRestaurants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) FindRestaurantById(ctx context.Context, in *IdRestaurant, opts ...grpc.CallOption) (*RestaurantDetailed, error) {
	out := new(RestaurantDetailed)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/FindRestaurantById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) FindMenuById(ctx context.Context, in *MenuId, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/FindMenuById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) CalculateOrder(ctx context.Context, in *RequestMenuDetails, opts ...grpc.CallOption) (*CalculateOrderResponse, error) {
	out := new(CalculateOrderResponse)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/CalculateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) CreateRestaurant(ctx context.Context, in *NewRestaurantData, opts ...grpc.CallOption) (*IdRestaurant, error) {
	out := new(IdRestaurant)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/CreateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) UpdateRestaurant(ctx context.Context, in *UpdateRestaurantData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/UpdateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) CreateMenu(ctx context.Context, in *NewMenuData, opts ...grpc.CallOption) (*MenuId, error) {
	out := new(MenuId)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) UpdateMenu(ctx context.Context, in *UpdateMenuData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) DeleteMenu(ctx context.Context, in *AdminIdMenuId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) FindRestaurantByAdminId(ctx context.Context, in *AdminId, opts ...grpc.CallOption) (*RestaurantData, error) {
	out := new(RestaurantData)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/FindRestaurantByAdminId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) FindMenusByAdminId(ctx context.Context, in *AdminId, opts ...grpc.CallOption) (*MenuCompactRepeated, error) {
	out := new(MenuCompactRepeated)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/FindMenusByAdminId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) FindOneMenuByAdminId(ctx context.Context, in *AdminIdMenuId, opts ...grpc.CallOption) (*MenuCompact, error) {
	out := new(MenuCompact)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/FindOneMenuByAdminId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServer is the server API for Merchant service.
// All implementations must embed UnimplementedMerchantServer
// for forward compatibility
type MerchantServer interface {
	// For customer (order service)
	FindAllRestaurants(context.Context, *emptypb.Empty) (*RestaurantCompactRepeated, error)
	FindRestaurantById(context.Context, *IdRestaurant) (*RestaurantDetailed, error)
	FindMenuById(context.Context, *MenuId) (*Menu, error)
	CalculateOrder(context.Context, *RequestMenuDetails) (*CalculateOrderResponse, error)
	// For admin
	CreateRestaurant(context.Context, *NewRestaurantData) (*IdRestaurant, error)
	UpdateRestaurant(context.Context, *UpdateRestaurantData) (*emptypb.Empty, error)
	CreateMenu(context.Context, *NewMenuData) (*MenuId, error)
	UpdateMenu(context.Context, *UpdateMenuData) (*emptypb.Empty, error)
	DeleteMenu(context.Context, *AdminIdMenuId) (*emptypb.Empty, error)
	FindRestaurantByAdminId(context.Context, *AdminId) (*RestaurantData, error)
	FindMenusByAdminId(context.Context, *AdminId) (*MenuCompactRepeated, error)
	FindOneMenuByAdminId(context.Context, *AdminIdMenuId) (*MenuCompact, error)
	mustEmbedUnimplementedMerchantServer()
}

// UnimplementedMerchantServer must be embedded to have forward compatible implementations.
type UnimplementedMerchantServer struct {
}

func (UnimplementedMerchantServer) FindAllRestaurants(context.Context, *emptypb.Empty) (*RestaurantCompactRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllRestaurants not implemented")
}
func (UnimplementedMerchantServer) FindRestaurantById(context.Context, *IdRestaurant) (*RestaurantDetailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRestaurantById not implemented")
}
func (UnimplementedMerchantServer) FindMenuById(context.Context, *MenuId) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenuById not implemented")
}
func (UnimplementedMerchantServer) CalculateOrder(context.Context, *RequestMenuDetails) (*CalculateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateOrder not implemented")
}
func (UnimplementedMerchantServer) CreateRestaurant(context.Context, *NewRestaurantData) (*IdRestaurant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestaurant not implemented")
}
func (UnimplementedMerchantServer) UpdateRestaurant(context.Context, *UpdateRestaurantData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurant not implemented")
}
func (UnimplementedMerchantServer) CreateMenu(context.Context, *NewMenuData) (*MenuId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedMerchantServer) UpdateMenu(context.Context, *UpdateMenuData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedMerchantServer) DeleteMenu(context.Context, *AdminIdMenuId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedMerchantServer) FindRestaurantByAdminId(context.Context, *AdminId) (*RestaurantData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRestaurantByAdminId not implemented")
}
func (UnimplementedMerchantServer) FindMenusByAdminId(context.Context, *AdminId) (*MenuCompactRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMenusByAdminId not implemented")
}
func (UnimplementedMerchantServer) FindOneMenuByAdminId(context.Context, *AdminIdMenuId) (*MenuCompact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneMenuByAdminId not implemented")
}
func (UnimplementedMerchantServer) mustEmbedUnimplementedMerchantServer() {}

// UnsafeMerchantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServer will
// result in compilation errors.
type UnsafeMerchantServer interface {
	mustEmbedUnimplementedMerchantServer()
}

func RegisterMerchantServer(s grpc.ServiceRegistrar, srv MerchantServer) {
	s.RegisterService(&Merchant_ServiceDesc, srv)
}

func _Merchant_FindAllRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).FindAllRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/FindAllRestaurants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).FindAllRestaurants(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_FindRestaurantById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRestaurant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).FindRestaurantById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/FindRestaurantById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).FindRestaurantById(ctx, req.(*IdRestaurant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_FindMenuById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).FindMenuById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/FindMenuById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).FindMenuById(ctx, req.(*MenuId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_CalculateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMenuDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).CalculateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/CalculateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).CalculateOrder(ctx, req.(*RequestMenuDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_CreateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRestaurantData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).CreateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/CreateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).CreateRestaurant(ctx, req.(*NewRestaurantData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_UpdateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRestaurantData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).UpdateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/UpdateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).UpdateRestaurant(ctx, req.(*UpdateRestaurantData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMenuData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).CreateMenu(ctx, req.(*NewMenuData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).UpdateMenu(ctx, req.(*UpdateMenuData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdMenuId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).DeleteMenu(ctx, req.(*AdminIdMenuId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_FindRestaurantByAdminId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).FindRestaurantByAdminId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/FindRestaurantByAdminId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).FindRestaurantByAdminId(ctx, req.(*AdminId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_FindMenusByAdminId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).FindMenusByAdminId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/FindMenusByAdminId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).FindMenusByAdminId(ctx, req.(*AdminId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_FindOneMenuByAdminId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdMenuId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).FindOneMenuByAdminId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/FindOneMenuByAdminId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).FindOneMenuByAdminId(ctx, req.(*AdminIdMenuId))
	}
	return interceptor(ctx, in, info, handler)
}

// Merchant_ServiceDesc is the grpc.ServiceDesc for Merchant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Merchant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.Merchant",
	HandlerType: (*MerchantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllRestaurants",
			Handler:    _Merchant_FindAllRestaurants_Handler,
		},
		{
			MethodName: "FindRestaurantById",
			Handler:    _Merchant_FindRestaurantById_Handler,
		},
		{
			MethodName: "FindMenuById",
			Handler:    _Merchant_FindMenuById_Handler,
		},
		{
			MethodName: "CalculateOrder",
			Handler:    _Merchant_CalculateOrder_Handler,
		},
		{
			MethodName: "CreateRestaurant",
			Handler:    _Merchant_CreateRestaurant_Handler,
		},
		{
			MethodName: "UpdateRestaurant",
			Handler:    _Merchant_UpdateRestaurant_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Merchant_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Merchant_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Merchant_DeleteMenu_Handler,
		},
		{
			MethodName: "FindRestaurantByAdminId",
			Handler:    _Merchant_FindRestaurantByAdminId_Handler,
		},
		{
			MethodName: "FindMenusByAdminId",
			Handler:    _Merchant_FindMenusByAdminId_Handler,
		},
		{
			MethodName: "FindOneMenuByAdminId",
			Handler:    _Merchant_FindOneMenuByAdminId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant.proto",
}
