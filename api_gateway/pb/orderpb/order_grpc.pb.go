// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: order.proto

package orderpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	PostOrder(ctx context.Context, in *RequestOrderData, opts ...grpc.CallOption) (*Order, error)
	GetRestaurantCurrentOrders(ctx context.Context, in *AdminId, opts ...grpc.CallOption) (*Orders, error)
	GetRestaurantAllOrders(ctx context.Context, in *AdminId, opts ...grpc.CallOption) (*Orders, error)
	GetUserCurrentOrders(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Orders, error)
	GetUserAllOrders(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Orders, error)
	GetDriverAllOrders(ctx context.Context, in *DriverId, opts ...grpc.CallOption) (*Orders, error)
	GetDriverCurrentOrder(ctx context.Context, in *DriverId, opts ...grpc.CallOption) (*Order, error)
	GetOrderById(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*Order, error)
	UpdateRestaurantOrderStatus(ctx context.Context, in *RequestUpdateData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDriverOrderStatus(ctx context.Context, in *RequestUpdateData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePaymentOrderStatus(ctx context.Context, in *RequestUpdatePayment, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) PostOrder(ctx context.Context, in *RequestOrderData, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/order.OrderService/PostOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRestaurantCurrentOrders(ctx context.Context, in *AdminId, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetRestaurantCurrentOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetRestaurantAllOrders(ctx context.Context, in *AdminId, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetRestaurantAllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetUserCurrentOrders(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetUserCurrentOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetUserAllOrders(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetUserAllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetDriverAllOrders(ctx context.Context, in *DriverId, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetDriverAllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetDriverCurrentOrder(ctx context.Context, in *DriverId, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetDriverCurrentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderById(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateRestaurantOrderStatus(ctx context.Context, in *RequestUpdateData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order.OrderService/UpdateRestaurantOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateDriverOrderStatus(ctx context.Context, in *RequestUpdateData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order.OrderService/UpdateDriverOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdatePaymentOrderStatus(ctx context.Context, in *RequestUpdatePayment, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order.OrderService/UpdatePaymentOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	PostOrder(context.Context, *RequestOrderData) (*Order, error)
	GetRestaurantCurrentOrders(context.Context, *AdminId) (*Orders, error)
	GetRestaurantAllOrders(context.Context, *AdminId) (*Orders, error)
	GetUserCurrentOrders(context.Context, *UserId) (*Orders, error)
	GetUserAllOrders(context.Context, *UserId) (*Orders, error)
	GetDriverAllOrders(context.Context, *DriverId) (*Orders, error)
	GetDriverCurrentOrder(context.Context, *DriverId) (*Order, error)
	GetOrderById(context.Context, *OrderId) (*Order, error)
	UpdateRestaurantOrderStatus(context.Context, *RequestUpdateData) (*emptypb.Empty, error)
	UpdateDriverOrderStatus(context.Context, *RequestUpdateData) (*emptypb.Empty, error)
	UpdatePaymentOrderStatus(context.Context, *RequestUpdatePayment) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) PostOrder(context.Context, *RequestOrderData) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetRestaurantCurrentOrders(context.Context, *AdminId) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantCurrentOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetRestaurantAllOrders(context.Context, *AdminId) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantAllOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetUserCurrentOrders(context.Context, *UserId) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCurrentOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetUserAllOrders(context.Context, *UserId) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAllOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetDriverAllOrders(context.Context, *DriverId) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverAllOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetDriverCurrentOrder(context.Context, *DriverId) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverCurrentOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderById(context.Context, *OrderId) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrderServiceServer) UpdateRestaurantOrderStatus(context.Context, *RequestUpdateData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurantOrderStatus not implemented")
}
func (UnimplementedOrderServiceServer) UpdateDriverOrderStatus(context.Context, *RequestUpdateData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriverOrderStatus not implemented")
}
func (UnimplementedOrderServiceServer) UpdatePaymentOrderStatus(context.Context, *RequestUpdatePayment) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentOrderStatus not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_PostOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOrderData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).PostOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/PostOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).PostOrder(ctx, req.(*RequestOrderData))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRestaurantCurrentOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRestaurantCurrentOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetRestaurantCurrentOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRestaurantCurrentOrders(ctx, req.(*AdminId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetRestaurantAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetRestaurantAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetRestaurantAllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetRestaurantAllOrders(ctx, req.(*AdminId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetUserCurrentOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetUserCurrentOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetUserCurrentOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetUserCurrentOrders(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetUserAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetUserAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetUserAllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetUserAllOrders(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetDriverAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetDriverAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetDriverAllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetDriverAllOrders(ctx, req.(*DriverId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetDriverCurrentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetDriverCurrentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetDriverCurrentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetDriverCurrentOrder(ctx, req.(*DriverId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderById(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateRestaurantOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdateData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateRestaurantOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/UpdateRestaurantOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateRestaurantOrderStatus(ctx, req.(*RequestUpdateData))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateDriverOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdateData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateDriverOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/UpdateDriverOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateDriverOrderStatus(ctx, req.(*RequestUpdateData))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdatePaymentOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdatePayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdatePaymentOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/UpdatePaymentOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdatePaymentOrderStatus(ctx, req.(*RequestUpdatePayment))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostOrder",
			Handler:    _OrderService_PostOrder_Handler,
		},
		{
			MethodName: "GetRestaurantCurrentOrders",
			Handler:    _OrderService_GetRestaurantCurrentOrders_Handler,
		},
		{
			MethodName: "GetRestaurantAllOrders",
			Handler:    _OrderService_GetRestaurantAllOrders_Handler,
		},
		{
			MethodName: "GetUserCurrentOrders",
			Handler:    _OrderService_GetUserCurrentOrders_Handler,
		},
		{
			MethodName: "GetUserAllOrders",
			Handler:    _OrderService_GetUserAllOrders_Handler,
		},
		{
			MethodName: "GetDriverAllOrders",
			Handler:    _OrderService_GetDriverAllOrders_Handler,
		},
		{
			MethodName: "GetDriverCurrentOrder",
			Handler:    _OrderService_GetDriverCurrentOrder_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _OrderService_GetOrderById_Handler,
		},
		{
			MethodName: "UpdateRestaurantOrderStatus",
			Handler:    _OrderService_UpdateRestaurantOrderStatus_Handler,
		},
		{
			MethodName: "UpdateDriverOrderStatus",
			Handler:    _OrderService_UpdateDriverOrderStatus_Handler,
		},
		{
			MethodName: "UpdatePaymentOrderStatus",
			Handler:    _OrderService_UpdatePaymentOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
