basePath: /
definitions:
  dto.NewMenuData:
    properties:
      category_id:
        type: integer
        x-order: "2"
      id:
        type: integer
        x-order: "0"
      name:
        type: string
        x-order: "1"
      price:
        type: number
        x-order: "3"
    required:
    - category_id
    - name
    - price
    type: object
  dto.NewOrderItem:
    properties:
      menu_id:
        type: integer
      qty:
        type: integer
    required:
    - menu_id
    type: object
  dto.NewOrderRequest:
    properties:
      address:
        type: string
      items:
        items:
          $ref: '#/definitions/dto.NewOrderItem'
        type: array
    required:
    - address
    - items
    type: object
  dto.NewRestaurantData:
    properties:
      address:
        type: string
        x-order: "1"
      name:
        type: string
        x-order: "0"
    required:
    - address
    - name
    type: object
  dto.Response:
    properties:
      data:
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.ResponseNewRestaurant:
    properties:
      address:
        type: string
        x-order: "2"
      id:
        type: integer
        x-order: "0"
      latitude:
        type: number
        x-order: "3"
      longitude:
        type: number
        x-order: "4"
      name:
        type: string
        x-order: "1"
    type: object
  dto.ResponseUpdateRestaurant:
    properties:
      address:
        type: string
        x-order: "2"
      latitude:
        type: number
        x-order: "3"
      longitude:
        type: number
        x-order: "4"
      name:
        type: string
        x-order: "1"
    type: object
  dto.SwaggerRequestMenu:
    properties:
      category_id:
        type: integer
        x-order: "2"
      name:
        type: string
        x-order: "0"
      price:
        type: number
        x-order: "1"
    type: object
  dto.SwaggerResponese:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/orderpb.Orders'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseCreateMenuByAdminID:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/dto.NewMenuData'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseCreateRestaurant:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/dto.ResponseNewRestaurant'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseDriverGetAllOrders:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/orderpb.Orders'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseDriverGetCurrentOrder:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/orderpb.Order'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseGetAllCategories:
    properties:
      data:
        items:
          $ref: '#/definitions/merchantpb.Category'
        type: array
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseGetAllRestaurant:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/merchantpb.RestaurantCompactRepeated'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseGetMenuByAdminID:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/merchantpb.MenuCompactRepeated'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseGetMenuById:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/merchantpb.Menu'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseGetMenuIdByAdminID:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/merchantpb.MenuCompact'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseGetRestaurantByAdminID:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/merchantpb.RestaurantData'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseGetRestaurantByID:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/merchantpb.RestaurantDetailed'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseOrder:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/orderpb.Order'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseRegister:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/models.User'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseUpdateMenuByAdminID:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/dto.UpdateMenuData'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseUpdateOrder:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/orderpb.RequestUpdateData'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.SwaggerResponseUpdateRestaurant:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/dto.ResponseUpdateRestaurant'
        x-order: "1"
      message:
        type: string
        x-order: "0"
    type: object
  dto.UpdateMenuData:
    properties:
      category_id:
        type: integer
        x-order: "2"
      menu_id:
        type: integer
        x-order: "0"
      name:
        type: string
        x-order: "1"
      price:
        type: number
        x-order: "3"
    required:
    - category_id
    - name
    - price
    type: object
  dto.UpdateOrderStatus:
    properties:
      status:
        enum:
        - cancelled
        - done
        type: string
    required:
    - status
    type: object
  dto.UpdateRestaurantData:
    properties:
      address:
        type: string
        x-order: "1"
      name:
        type: string
        x-order: "0"
    required:
    - address
    - name
    type: object
  dto.UserLogin:
    properties:
      email:
        type: string
        x-order: "0"
      password:
        type: string
        x-order: "1"
    required:
    - email
    - password
    type: object
  dto.UserRegister:
    properties:
      birth_date:
        type: string
        x-order: "4"
      email:
        type: string
        x-order: "2"
      first_name:
        type: string
        x-order: "0"
      last_name:
        type: string
        x-order: "1"
      password:
        type: string
        x-order: "3"
    required:
    - birth_date
    - email
    - first_name
    - password
    type: object
  merchantpb.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  merchantpb.Menu:
    properties:
      category:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
    type: object
  merchantpb.MenuCompact:
    properties:
      category:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  merchantpb.MenuCompactRepeated:
    properties:
      menus:
        items:
          $ref: '#/definitions/merchantpb.MenuCompact'
        type: array
    type: object
  merchantpb.RestaurantCompact:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  merchantpb.RestaurantCompactRepeated:
    properties:
      restaurants:
        items:
          $ref: '#/definitions/merchantpb.RestaurantCompact'
        type: array
    type: object
  merchantpb.RestaurantData:
    properties:
      address:
        type: string
      admin_id:
        type: integer
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    type: object
  merchantpb.RestaurantDetailed:
    properties:
      address:
        type: string
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      menus:
        items:
          $ref: '#/definitions/merchantpb.Menu'
        type: array
      name:
        type: string
    type: object
  models.User:
    properties:
      birth_date:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  orderpb.Address:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  orderpb.Driver:
    properties:
      id:
        type: integer
      name:
        type: string
      status:
        type: string
    type: object
  orderpb.Menu:
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      subtotal:
        type: number
    type: object
  orderpb.Order:
    properties:
      driver:
        $ref: '#/definitions/orderpb.Driver'
      object_id:
        type: string
      order_detail:
        $ref: '#/definitions/orderpb.OrderDetail'
      payment:
        $ref: '#/definitions/orderpb.Payment'
      restaurant:
        $ref: '#/definitions/orderpb.Restaurant'
      user:
        $ref: '#/definitions/orderpb.User'
    type: object
  orderpb.OrderDetail:
    properties:
      created_at:
        type: string
      delivery_fee:
        type: number
      grand_total:
        type: number
      items_subtotal:
        type: number
      menu:
        items:
          $ref: '#/definitions/orderpb.Menu'
        type: array
      status:
        type: string
    type: object
  orderpb.Orders:
    properties:
      orders:
        items:
          $ref: '#/definitions/orderpb.Order'
        type: array
    type: object
  orderpb.Payment:
    properties:
      invoice_id:
        type: string
      invoice_url:
        type: string
      method:
        type: string
      status:
        type: string
      total:
        type: number
    type: object
  orderpb.RequestUpdateData:
    properties:
      order_id:
        type: string
      status:
        type: string
      user_id:
        type: integer
    type: object
  orderpb.Restaurant:
    properties:
      address:
        $ref: '#/definitions/orderpb.Address'
      admin_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      status:
        type: string
    type: object
  orderpb.User:
    properties:
      address:
        $ref: '#/definitions/orderpb.Address'
      email:
        type: string
      name:
        type: string
      user_id:
        type: integer
    type: object
  utils.ErrResponse:
    properties:
      detail:
        type: string
        x-order: "2"
      status:
        type: integer
        x-order: "0"
      type:
        type: string
        x-order: "1"
    type: object
host: jeki-x72poumuyq-et.a.run.app
info:
  contact:
    email: daniel.rahmanto@gmail.com
    name: Contact the developer
  description: Food delivery app built with microservices that integrates customer,
    driver, and restaurant.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Jeki
  version: "1.0"
paths:
  /categories:
    get:
      description: Retrieve all restaurant datas from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseGetAllCategories'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get all categories
      tags:
      - all user
  /driver/ongoing:
    get:
      description: Retrieve ongoing order related to the logged in driver. You will
        need an 'Authorization' cookie attached with this request.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseDriverGetCurrentOrder'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get current driver's order
      tags:
      - driver
  /driver/orders:
    get:
      description: Retrieve all orders related to the logged in driver. You will need
        an 'Authorization' cookie attached with this request.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseDriverGetAllOrders'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get all driver's orders
      tags:
      - driver
  /driver/orders/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an order by it's ID. You will need an 'Authorization'
        cookie attached with this request.
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseOrder'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get order by ID
      tags:
      - driver
    put:
      consumes:
      - application/json
      description: Updates ongoing order status related to the logged in driver. You
        will need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Driver Update Order
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrderStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseUpdateOrder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update driver's order
      tags:
      - driver
  /menu/{id}:
    get:
      description: Retrieve specific menu data using the menu id.
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseGetMenuById'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get menu By ID
      tags:
      - all user
  /merchant/menu:
    get:
      description: Retrieves restaurant menus specific to the current logged in admin.
        You will need an 'Authorization' cookie attached with this request.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseGetMenuByAdminID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get menu for restaurant admin
      tags:
      - merchant
    post:
      consumes:
      - application/json
      description: Creates new menu data specific to the current logged in admin.
        You will need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Create Menu
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SwaggerRequestMenu'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SwaggerResponseCreateMenuByAdminID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Create menu for restaurant admin
      tags:
      - merchant
  /merchant/menu/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes existing menu for the current logged in admin. You will
        need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Delete menu for restaurant admin
      tags:
      - merchant
    get:
      description: Retrieves one menu specific to the current logged in admin. You
        will need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseGetMenuIdByAdminID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get one menu for restaurant admin
      tags:
      - merchant
    put:
      consumes:
      - application/json
      description: Updates existing menu data specific to the current logged in admin.
        You will need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Menu
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SwaggerRequestMenu'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseUpdateMenuByAdminID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update menu for restaurant admin
      tags:
      - merchant
  /merchant/ongoing:
    get:
      description: Retrieve ongoing orders for the logged in merchant admin. You will
        need an 'Authorization' cookie attached with this request.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponese'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get ongoing merchant's order
      tags:
      - merchant
  /merchant/orders:
    get:
      description: Retrieve all orders for the logged in merchant admin. You will
        need an 'Authorization' cookie attached with this request.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponese'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get all merchant's order
      tags:
      - merchant
  /merchant/orders/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve order details by it's order ID. You will need an 'Authorization'
        cookie attached with this request.
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseOrder'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get order by ID
      tags:
      - merchant
    put:
      consumes:
      - application/json
      description: Updates order status to the current logged in merchant admin. You
        will need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      - description: Merchant Update Order
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrderStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseUpdateOrder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update merchant's order status
      tags:
      - merchant
  /merchant/restaurant:
    get:
      description: Retrieves restaurant data specific to the current logged in admin.
        You will need an 'Authorization' cookie attached with this request.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseGetRestaurantByAdminID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get restaurant for restaurant admin
      tags:
      - merchant
    post:
      description: Creates a new restaurant data specific to the current logged in
        admin. You will need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Create Restaurant
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.NewRestaurantData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SwaggerResponseCreateRestaurant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Create restaurant for restaurant admin
      tags:
      - merchant
    put:
      description: Updates existing restaurant data specific to the current logged
        in admin. You will need an 'Authorization' cookie attached with this request.
      parameters:
      - description: Update Restaurant
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRestaurantData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseUpdateRestaurant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update restaurant for restaurant admin
      tags:
      - merchant
  /restaurant:
    get:
      description: Retrieve all restaurant datas from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseGetAllRestaurant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get all restaurant datas
      tags:
      - all user
  /restaurant/{id}:
    get:
      description: Retrieve specific restaurant data using the restaurant id.
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseGetRestaurantByID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get restaurant by ID
      tags:
      - all user
  /users/login:
    post:
      consumes:
      - application/json
      description: Log users in and embeds a JWt-Auth in cookie
      parameters:
      - description: User login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Log in
      tags:
      - all user
  /users/logout:
    get:
      consumes:
      - application/json
      description: Logout the currently authenticated user and clears the authorization
        cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Logout the user
      tags:
      - all user
  /users/ongoing:
    get:
      consumes:
      - application/json
      description: Get ongoing orders for the logged in user. You will need an 'Authorization'
        cookie attached with this request.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponese'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get ongoing user orders
      tags:
      - customer
  /users/orders:
    get:
      consumes:
      - application/json
      description: Retrieves all orders for the logged-in user. You will need an 'Authorization'
        cookie attached with this request.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponese'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get all user orders
      tags:
      - customer
    post:
      consumes:
      - application/json
      description: Create a new order for the logged in user. You will need an 'Authorization'
        cookie attached with this request.
      parameters:
      - description: Order details
        in: body
        name: orderRequest
        required: true
        schema:
          $ref: '#/definitions/dto.NewOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SwaggerResponseOrder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Create new order
      tags:
      - customer
  /users/orders/{id}:
    get:
      consumes:
      - application/json
      description: Get order details by it's order ID. You will need an 'Authorization'
        cookie attached with this request.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SwaggerResponseOrder'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get order by ID
      tags:
      - customer
  /users/register/admin:
    post:
      consumes:
      - application/json
      description: Register a new user with the role 'Admin'
      parameters:
      - description: Admin registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SwaggerResponseRegister'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Register a new admin
      tags:
      - merchant
  /users/register/driver:
    post:
      consumes:
      - application/json
      description: Register a new user with the role 'Driver'
      parameters:
      - description: Driver registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SwaggerResponseRegister'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Register a new driver
      tags:
      - driver
  /users/register/user:
    post:
      consumes:
      - application/json
      description: Register a new user with the role 'User'
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SwaggerResponseRegister'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Register a new user
      tags:
      - customer
  /users/verify/{userid}/{token}:
    get:
      consumes:
      - application/json
      description: Verify the user registration using unique token sent to the registered
        email
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: integer
      - description: Verification token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Verify user credentials
      tags:
      - all user
swagger: "2.0"
