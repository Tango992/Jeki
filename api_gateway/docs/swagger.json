{
    "swagger": "2.0",
    "info": {
        "description": "Food delivery app built with microservices that integrates customer, driver, and restaurant.",
        "title": "Jeki",
        "contact": {
            "name": "Contact the developer",
            "email": "daniel.rahmanto@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.1"
    },
    "host": "jeki-x72poumuyq-et.a.run.app",
    "basePath": "/",
    "paths": {
        "/categories": {
            "get": {
                "description": "Retrieve all restaurant datas from the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "all user"
                ],
                "summary": "Get all categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseGetAllCategories"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/driver/ongoing": {
            "get": {
                "description": "Retrieve ongoing order related to the logged in driver. You will need an 'Authorization' cookie attached with this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "driver"
                ],
                "summary": "Get current driver's order",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseDriverGetCurrentOrder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/driver/orders": {
            "get": {
                "description": "Retrieve all orders related to the logged in driver. You will need an 'Authorization' cookie attached with this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "driver"
                ],
                "summary": "Get all driver's orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseDriverGetAllOrders"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/driver/orders/{id}": {
            "get": {
                "description": "Retrieve an order by it's ID. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "driver"
                ],
                "summary": "Get order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseOrder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates ongoing order status related to the logged in driver. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "driver"
                ],
                "summary": "Update driver's order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Driver Update Order",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrderStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseUpdateOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/menu/{id}": {
            "get": {
                "description": "Retrieve specific menu data using the menu id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "all user"
                ],
                "summary": "Get menu By ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseGetMenuById"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/merchant/menu": {
            "get": {
                "description": "Retrieves restaurant menus specific to the current logged in admin. You will need an 'Authorization' cookie attached with this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Get menu for restaurant admin",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseGetMenuByAdminID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates new menu data specific to the current logged in admin. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Create menu for restaurant admin",
                "parameters": [
                    {
                        "description": "Create Menu",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerRequestMenu"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseCreateMenuByAdminID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/merchant/menu/{id}": {
            "get": {
                "description": "Retrieves one menu specific to the current logged in admin. You will need an 'Authorization' cookie attached with this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Get one menu for restaurant admin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseGetMenuIdByAdminID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates existing menu data specific to the current logged in admin. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Update menu for restaurant admin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Menu",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerRequestMenu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseUpdateMenuByAdminID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes existing menu for the current logged in admin. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Delete menu for restaurant admin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/merchant/ongoing": {
            "get": {
                "description": "Retrieve ongoing orders for the logged in merchant admin. You will need an 'Authorization' cookie attached with this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Get ongoing merchant's order",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponese"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/merchant/orders": {
            "get": {
                "description": "Retrieve all orders for the logged in merchant admin. You will need an 'Authorization' cookie attached with this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Get all merchant's order",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponese"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/merchant/orders/{id}": {
            "get": {
                "description": "Retrieve order details by it's order ID. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Get order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseOrder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates order status to the current logged in merchant admin. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Update merchant's order status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Merchant Update Order",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrderStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseUpdateOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/merchant/restaurant": {
            "get": {
                "description": "Retrieves restaurant data specific to the current logged in admin. You will need an 'Authorization' cookie attached with this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Get restaurant for restaurant admin",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseGetRestaurantByAdminID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates existing restaurant data specific to the current logged in admin. You will need an 'Authorization' cookie attached with this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Update restaurant for restaurant admin",
                "parameters": [
                    {
                        "description": "Update Restaurant",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateRestaurantData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseUpdateRestaurant"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new restaurant data specific to the current logged in admin. You will need an 'Authorization' cookie attached with this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Create restaurant for restaurant admin",
                "parameters": [
                    {
                        "description": "Create Restaurant",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewRestaurantData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseCreateRestaurant"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/restaurant": {
            "get": {
                "description": "Retrieve all restaurant datas from the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "all user"
                ],
                "summary": "Get all restaurant datas",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseGetAllRestaurant"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/restaurant/{id}": {
            "get": {
                "description": "Retrieve specific restaurant data using the restaurant id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "all user"
                ],
                "summary": "Get restaurant by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseGetRestaurantByID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Log users in and embeds a JWt-Auth in cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "all user"
                ],
                "summary": "Log in",
                "parameters": [
                    {
                        "description": "User login details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/logout": {
            "get": {
                "description": "Logout the currently authenticated user and clears the authorization cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "all user"
                ],
                "summary": "Logout the user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/ongoing": {
            "get": {
                "description": "Get ongoing orders for the logged in user. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customer"
                ],
                "summary": "Get ongoing user orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponese"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/orders": {
            "get": {
                "description": "Retrieves all orders for the logged-in user. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customer"
                ],
                "summary": "Get all user orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponese"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new order for the logged in user. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customer"
                ],
                "summary": "Create new order",
                "parameters": [
                    {
                        "description": "Order details",
                        "name": "orderRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/orders/{id}": {
            "get": {
                "description": "Get order details by it's order ID. You will need an 'Authorization' cookie attached with this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customer"
                ],
                "summary": "Get order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseOrder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/register/admin": {
            "post": {
                "description": "Register a new user with the role 'Admin'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Register a new admin",
                "parameters": [
                    {
                        "description": "Admin registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegister"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseRegister"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/register/driver": {
            "post": {
                "description": "Register a new user with the role 'Driver'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "driver"
                ],
                "summary": "Register a new driver",
                "parameters": [
                    {
                        "description": "Driver registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegister"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseRegister"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/register/user": {
            "post": {
                "description": "Register a new user with the role 'User'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customer"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegister"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.SwaggerResponseRegister"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/verify/{userid}/{token}": {
            "get": {
                "description": "Verify the user registration using unique token sent to the registered email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "all user"
                ],
                "summary": "Verify user credentials",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.NewMenuData": {
            "type": "object",
            "required": [
                "category_id",
                "name",
                "price"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "name": {
                    "type": "string",
                    "x-order": "1"
                },
                "category_id": {
                    "type": "integer",
                    "x-order": "2"
                },
                "price": {
                    "type": "number",
                    "x-order": "3"
                }
            }
        },
        "dto.NewOrderItem": {
            "type": "object",
            "required": [
                "menu_id"
            ],
            "properties": {
                "menu_id": {
                    "type": "integer"
                },
                "qty": {
                    "type": "integer"
                }
            }
        },
        "dto.NewOrderRequest": {
            "type": "object",
            "required": [
                "address",
                "items"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.NewOrderItem"
                    }
                }
            }
        },
        "dto.NewRestaurantData": {
            "type": "object",
            "required": [
                "address",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "x-order": "0"
                },
                "address": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        },
        "dto.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "x-order": "1"
                }
            }
        },
        "dto.ResponseNewRestaurant": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "name": {
                    "type": "string",
                    "x-order": "1"
                },
                "address": {
                    "type": "string",
                    "x-order": "2"
                },
                "latitude": {
                    "type": "number",
                    "x-order": "3"
                },
                "longitude": {
                    "type": "number",
                    "x-order": "4"
                }
            }
        },
        "dto.ResponseUpdateRestaurant": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "x-order": "1"
                },
                "address": {
                    "type": "string",
                    "x-order": "2"
                },
                "latitude": {
                    "type": "number",
                    "x-order": "3"
                },
                "longitude": {
                    "type": "number",
                    "x-order": "4"
                }
            }
        },
        "dto.SwaggerRequestMenu": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "x-order": "0"
                },
                "price": {
                    "type": "number",
                    "x-order": "1"
                },
                "category_id": {
                    "type": "integer",
                    "x-order": "2"
                }
            }
        },
        "dto.SwaggerResponese": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/orderpb.Orders"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseCreateMenuByAdminID": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.NewMenuData"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseCreateRestaurant": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ResponseNewRestaurant"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseDriverGetAllOrders": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/orderpb.Orders"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseDriverGetCurrentOrder": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/orderpb.Order"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseGetAllCategories": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/merchantpb.Category"
                    },
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseGetAllRestaurant": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/merchantpb.RestaurantCompactRepeated"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseGetMenuByAdminID": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/merchantpb.MenuCompactRepeated"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseGetMenuById": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/merchantpb.Menu"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseGetMenuIdByAdminID": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/merchantpb.MenuCompact"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseGetRestaurantByAdminID": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/merchantpb.RestaurantData"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseGetRestaurantByID": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/merchantpb.RestaurantDetailed"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseOrder": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/orderpb.Order"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseRegister": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseUpdateMenuByAdminID": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UpdateMenuData"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseUpdateOrder": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/orderpb.RequestUpdateData"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SwaggerResponseUpdateRestaurant": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ResponseUpdateRestaurant"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.UpdateMenuData": {
            "type": "object",
            "required": [
                "category_id",
                "name",
                "price"
            ],
            "properties": {
                "menu_id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "name": {
                    "type": "string",
                    "x-order": "1"
                },
                "category_id": {
                    "type": "integer",
                    "x-order": "2"
                },
                "price": {
                    "type": "number",
                    "x-order": "3"
                }
            }
        },
        "dto.UpdateOrderStatus": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "cancelled",
                        "done"
                    ]
                }
            }
        },
        "dto.UpdateRestaurantData": {
            "type": "object",
            "required": [
                "address",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "x-order": "0"
                },
                "address": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        },
        "dto.UserLogin": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "x-order": "0"
                },
                "password": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        },
        "dto.UserRegister": {
            "type": "object",
            "required": [
                "birth_date",
                "email",
                "first_name",
                "password"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "x-order": "0"
                },
                "last_name": {
                    "type": "string",
                    "x-order": "1"
                },
                "email": {
                    "type": "string",
                    "x-order": "2"
                },
                "password": {
                    "type": "string",
                    "x-order": "3"
                },
                "birth_date": {
                    "type": "string",
                    "x-order": "4"
                }
            }
        },
        "merchantpb.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "merchantpb.Menu": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "merchantpb.MenuCompact": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "merchantpb.MenuCompactRepeated": {
            "type": "object",
            "properties": {
                "menus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/merchantpb.MenuCompact"
                    }
                }
            }
        },
        "merchantpb.RestaurantCompact": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "merchantpb.RestaurantCompactRepeated": {
            "type": "object",
            "properties": {
                "restaurants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/merchantpb.RestaurantCompact"
                    }
                }
            }
        },
        "merchantpb.RestaurantData": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "admin_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "merchantpb.RestaurantDetailed": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "menus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/merchantpb.Menu"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "birth_date": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "orderpb.Address": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "orderpb.Driver": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "orderpb.Menu": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "integer"
                },
                "subtotal": {
                    "type": "number"
                }
            }
        },
        "orderpb.Order": {
            "type": "object",
            "properties": {
                "driver": {
                    "$ref": "#/definitions/orderpb.Driver"
                },
                "object_id": {
                    "type": "string"
                },
                "order_detail": {
                    "$ref": "#/definitions/orderpb.OrderDetail"
                },
                "payment": {
                    "$ref": "#/definitions/orderpb.Payment"
                },
                "restaurant": {
                    "$ref": "#/definitions/orderpb.Restaurant"
                },
                "user": {
                    "$ref": "#/definitions/orderpb.User"
                }
            }
        },
        "orderpb.OrderDetail": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "delivery_fee": {
                    "type": "number"
                },
                "grand_total": {
                    "type": "number"
                },
                "items_subtotal": {
                    "type": "number"
                },
                "menu": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/orderpb.Menu"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "orderpb.Orders": {
            "type": "object",
            "properties": {
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/orderpb.Order"
                    }
                }
            }
        },
        "orderpb.Payment": {
            "type": "object",
            "properties": {
                "invoice_id": {
                    "type": "string"
                },
                "invoice_url": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "orderpb.RequestUpdateData": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "orderpb.Restaurant": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/orderpb.Address"
                },
                "admin_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "orderpb.User": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/orderpb.Address"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "utils.ErrResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "x-order": "0"
                },
                "type": {
                    "type": "string",
                    "x-order": "1"
                },
                "detail": {
                    "type": "string",
                    "x-order": "2"
                }
            }
        }
    }
}